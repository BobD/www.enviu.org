// http://www.mademyday.de/css-height-equals-width-with-pure-css.html
@mixin box-ratio($ratio, $content){
  position: relative;
  
  &:before {
      display: block;
      content: "";
      width: 100%;
      padding-top: $ratio;
  }

  > #{$content}{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin logo(){  
  background-image: url('../images/static/enviu_logo.svg');
  background-repeat: no-repeat;
  background-position: left center;
  text-indent: -1000em;
  width: 130px;
}

%clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

%container {
  margin: $section-vertical-padding 0;
  min-width: $site-min-width;
  max-width: $site-max-width;
  margin: 0 auto;
  position: relative;
}

%container-narrow {
  @extend %container;
  max-width: $site-max-width * $section-narrow-width;
}


// ----
// http://www.sitepoint.com/managing-responsive-breakpoints-sass/
// http://sassmeister.com/gist/0614ac3971ae82925ef4
// ----
@mixin respond-to($name, $push: false) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media #{map-get($breakpoints, $name)} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  // But $push is defined
  @else if $push != false {
    // Add the new breakpoint to the map
    $breakpoints: map-merge($breakpoints, ($name: $push)) !global;
    // And re-call the mixin normally
    @include respond-to($name) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  // And there is no push
  @else {
    // Just warn the user
    @warn "Unfortunately, no value could be retrieved from `#{$name}`. "
        + "Please make sure it is defined in `$breakpoints` map. "
        + "Or pass the media query as a second parameter to add it to the map.";
  }
}


// http://www.mobify.com/blog/multiline-ellipsis-in-pure-css/
// @mixin multiline-ellipsis($height, $lineheight, $ellipsiswidth: 3em) {
//   & {
//     overflow: hidden;
//     height: $height;
//     line-height: $lineheight; }

//   &:before {
//     content:"";
//     float: left;
//     width: 5px; height: $height; }

//   & > *:first-child {
//     float: right;
//     width: 100%;
//     margin-left: -5px; }    

//   &:after {
//     content: "\02026";

//     float: right; position: relative;
//     margin-top: -$lineheight; 
//     top: 100%;
//     left: 100%; 
//     width: $ellipsiswidth; margin-left: -$ellipsiswidth;
//     padding-right: 5px;
    
//     text-align: right;
//     background: #F7F7F7;
//     background: -webkit-gradient(linear, left top, right top,
//         from(rgba(255, 255, 255, 0)), to(white), color-stop(50%, white));
//       background: -moz-linear-gradient(to right, rgba(255, 255, 255, 0), white 50%, white);     
//       background: -o-linear-gradient(to right, rgba(255, 255, 255, 0), white 50%, white);
//       background: -ms-linear-gradient(to right, rgba(255, 255, 255, 0), white 50%, white);
//       background: linear-gradient(to right, rgba(255, 255, 255, 0), white 50%, white)
//   }

// }
